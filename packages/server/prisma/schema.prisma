// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       Int  @id @default(autoincrement())
  username String  @unique
  password String
  email    String  @unique
  bio      String?
  avatar   String?
  role     Role    @default(USER)

  articles  Article[]
  isTeacher Boolean   @default(false)

  folders   Folder[]

  favoriteArticles Article[] @relation("favouriteArticles")
  favoriteFolders  Folder[]  @relation("favouriteFolders")

  isBanned  Boolean @default(false)
  banReason String?

  @@index([email, username])
  @@map("users")
}

model Article {
  id      Int @id @default(autoincrement())
  title   String
  content String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId Int

  likes Int @default(0)
  users User[] @relation("favouriteArticles")

  @@index([title, authorId])
  @@map("articles")
}

model Folder {
  id          Int @id @default(autoincrement())
  name        String
  description String
  author      User   @relation(fields: [authorId], references: [id])
  authorId    Int

  articles Article[]

  folder   Folder? @relation("folderToFolder", fields: [folderId], references: [id], onDelete: Cascade)
  folderId Int?

  childrenFolders Folder[] @relation("folderToFolder")

  likes Int @default(0)
  users User[] @relation("favouriteFolders")

  @@index([name, authorId])
  @@map("folders")
}
